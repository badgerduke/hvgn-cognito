AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template to define Cognito and associated resources for development 
  
Globals:
  Function:
    Timeout: 3

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod
    Description: Enter dev for development and prod for production

Mappings: 
  CognitoCallbackUrls:
    dev:
      values: 'http://localhost:4200/login/callback,https://dev.hvgn.net/login/callback'
    prod:
      values: 'https://hvgn.net/login/callback'
  CognitoLogoutUrls:
    dev:
      values: 'http://localhost:4200,https://dev.hvgn.net'
    prod:
      values: 'https://hvgn.net'
  CognitoCustomDomain:
    dev: cognito.dev.hvgn.net
    prod: cognito.hvgn.net

Resources:
  AssignGroupCognitoTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'What is this supposed to be?'
          EmailSubject: Welcome to HVGN!
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: auth-dev@mail.dev.hvgn.net
        SourceArn: arn:aws:ses:us-east-1:093879445146:identity/dev.hvgn.net
      EmailVerificationMessage: Your email had been verified.
      EmailVerificationSubject: Email verification
      LambdaConfig:
        PostConfirmation: !Ref AssignGroupCognitoTrigger
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email
      UserPoolName: hvgn-dev-user-pool
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: 'Your verification code is {####}.' 
        EmailSubject: Your verification code

  CognitoUserGroup:
    Type: AWS::Cognito::UserGroup
    Properties:
      Description: 'General group for HVGN'
      GroupName: hvgn-view
      Precedence: 5
      RoleArn: !GetAtt HvgnBackendLambdaExecutionRole.Arn
      UserPoolId: !GetAtt CognitoUserPool

  GoogleFederatedIdentity:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      AttributeMapping:
        email: "email"
      ProviderDetails:
        client_id: "{{resolve:secretsmanager:HvgnDevCognitoGoogleIdentityProvider:SecretString:HvgnDevCognitoGoogleClientId}}"
        client_secret: "{{resolve:secretsmanager:HvgnDevCognitoGoogleIdentityProvider:SecretString:HvgnDevCognitoGoogleClientSecret}}"
        authorize_scopes: "profile email openid"
      ProviderName: Google
      ProviderType: Google
      UserPoolId: !Ref CognitoUserPool

  CognitoClientApplication:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AccessTokenValidity: 30
      AllowedOAuthFlows: code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - phone
        - email
        - profile
        - openid
        - aws.cognito.signin.user.admin
      CallbackURLs: !Split [",", !FindInMap [ CognitoCallbackUrls, !Ref Environment, values] ]
      ClientName: !Join
        - ''
        - - 'hvgn-cognito-client-'
          - !Ref Environment
      EnableTokenRevocation: true
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      IdTokenValidity: 30
      LogoutURLs: !Split [",", !FindInMap [ CognitoLogoutUrls, !Ref Environment, values] ]
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 60
      SupportedIdentityProviders:
        - COGNITO
        - Google
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: minutes
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolCustomDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      CustomDomainConfig:
        CertificateArn: "{{resolve:secretsmanager:HvgnDomainCertificate:SecretString:arn}}"
      Domain: !FindInMap [ CognitoCustomDomain, !Ref Environment, url]
      UserPoolId: !Ref CognitoUserPool

  HvgnBackendLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join 
        - '-'
        - - 'hvgn-backend-lambda'
          - !Ref Environment
          - 'execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Join
            - '-'
            - - 'hvgn-backend-lambda'
              - !Ref Environment
              - 'execution-policy'            
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref "AWS::Region"
                    - ':'
                    - !Ref "AWS::AccountId"
                    - ':log-group:/aws/lambda/hvgn-backend-'
                    - !Ref Environment
                    - '*:*'
              - Effect: Allow
                Action: 
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref "AWS::Region"
                    - ':'
                    - !Ref "AWS::AccountId"
                    - ':log-group:/aws/lambda/hvgn-backend-'
                    - !Ref Environment
                    - '*:*:*'                  
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !Join
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - !Ref "AWS::Region"
                    - ':'
                    - !Ref "AWS::AccountId"
                    - ':table/hvgn-'
                    - !Ref Environment     
      
Outputs:
  CognitoUserPoolArn:
    Description: The ARN of the user pool
    Value: !GetAtt CognitoUserPool.Arn
    Export:
      Name: HvgnCognitoUserPoolArn
